Index: src/Window.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import content.AudioMaster;\r\nimport content.Source;\r\nimport content.Storage;\r\nimport content.Texture;\r\nimport math.AABB;\r\nimport math.CollisionMessage;\r\nimport mobs.*;\r\nimport objects.*;\r\nimport objects.Object;\r\nimport org.lwjgl.glfw.*;\r\nimport org.lwjgl.openal.AL10;\r\nimport org.lwjgl.opengl.*;\r\nimport org.lwjgl.system.*;\r\n\r\nimport java.nio.*;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\nimport static org.lwjgl.glfw.Callbacks.*;\r\nimport static org.lwjgl.glfw.GLFW.*;\r\nimport static org.lwjgl.opengl.GL11.*;\r\nimport static org.lwjgl.system.MemoryStack.*;\r\nimport static org.lwjgl.system.MemoryUtil.*;\r\n\r\npublic class Window {\r\n    private long window;\r\n    private ArrayList<Mob> mobList;\r\n    private HashMap<String, Integer> textureMap;\r\n    private HashMap<String, Integer> soundMap;\r\n    private HashMap<String, AABB> aabbMap;\r\n    private HashMap<Integer, Object> objectMap;\r\n    private String level = \"MainMenu\";\r\n    private boolean forScale = true;\r\n    boolean key_E_Pressed = false;\r\n    boolean forMainMenu = true;\r\n    boolean forMainTheme = true;\r\n    int forCameraInMainMenu = 0;\r\n    Source backgroundMusic, mobHurtSound, armorChange;\r\n    Player player;\r\n\r\n    public void run() {\r\n        System.out.println(\"Игра запущена\");\r\n\r\n        init();\r\n        loop();\r\n\r\n        glfwFreeCallbacks(window);\r\n        glfwDestroyWindow(window);\r\n\r\n        glfwTerminate();\r\n        glfwSetErrorCallback(null).free();\r\n    }\r\n\r\n    private void init() {\r\n        GLFWErrorCallback.createPrint(System.err).set();\r\n        if (!glfwInit()) throw new IllegalStateException(\"Unable to initialize GLFW\");\r\n\r\n        // Работа с экраном\r\n        window = glfwCreateWindow(1920, 1080, \"Philistine\", glfwGetPrimaryMonitor(), NULL);\r\n        if (window == NULL) throw new RuntimeException(\"Failed to create the GLFW window\");\r\n        try (MemoryStack stack = stackPush()) {\r\n            IntBuffer pWidth = stack.mallocInt(1);\r\n            IntBuffer pHeight = stack.mallocInt(1);\r\n            glfwGetWindowSize(window, pWidth, pHeight);\r\n            GLFWVidMode vidMode = glfwGetVideoMode(glfwGetPrimaryMonitor());\r\n            glfwSetWindowPos(window, (vidMode.width() - pWidth.get(0)) / 2, ((vidMode.height() - pHeight.get(0)) / 2) - 10);\r\n        }\r\n        glfwMakeContextCurrent(window);\r\n        glfwSwapInterval(1);\r\n        glfwShowWindow(window);\r\n\r\n        GL.createCapabilities(); // создает instance для OpenGL в текущем потоке\r\n        glMatrixMode(GL_PROJECTION); // Выставление камеры\r\n        glLoadIdentity(); // По видимости ненужная строка(что-то с единичной матрицей)\r\n        glOrtho(0, 640, 360, 0, 1, -1); // Камера на место окна\r\n        glMatrixMode(GL_MODELVIEW); // Установка матрицы в состояние ModelView\r\n        glEnable(GL_TEXTURE_2D);\r\n        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA); // Добавляет прозрачность\r\n        glEnable(GL_BLEND);\r\n\r\n        // Инициализация всех коллекций\r\n        mobList = new ArrayList<>();\r\n        textureMap = new HashMap<String, Integer>();\r\n        soundMap = new HashMap<String, Integer>();\r\n        aabbMap = new HashMap<String, AABB>();\r\n        objectMap = new HashMap<Integer, Object>();\r\n\r\n        AudioMaster.init();\r\n        AudioMaster.setListenerData();\r\n        backgroundMusic = new Source(1);\r\n        mobHurtSound = new Source(0);\r\n        armorChange = new Source(0);\r\n\r\n        // Единичная загрузка всех текстур\r\n        for (int i = 0, id = 0; i < Storage.textureString.length; i++)\r\n            textureMap.put(Storage.textureString[i], id = Texture.loadTexture(\"textures/\" + Storage.textureString[i]));\r\n\r\n        // Единичная загрузка всех звуков\r\n        for (int i = 0, id = 0; i < Storage.soundString.length; i++)\r\n            soundMap.put(Storage.soundString[i], id = AudioMaster.loadSound(\"sounds/\" + Storage.soundString[i]));\r\n\r\n        // Единичная загрузка всех хитбоксов\r\n        for(int i = 0; i < Storage.aabbString.length; i++)\r\n            aabbMap.put(Storage.aabbString[i], new AABB());\r\n\r\n        // Единичное установление хитбоксов стен первого уровня и переходов м/у уровнями\r\n        for(int i = 0, j = 0; i < 5; i++, j+=4)\r\n            aabbMap.get(\"wall\" + i).update(Storage.firstLevelWalls[j], Storage.firstLevelWalls[j + 1], Storage.firstLevelWalls[j + 2], Storage.firstLevelWalls[j + 3]);\r\n        aabbMap.get(\"entranceToFirstLevel\").update(0, 190, 2, 286);\r\n        aabbMap.get(\"entranceToSecondLevel\").update(638, 238, 640, 335);\r\n\r\n        // Добавление всех объектов и мобов\r\n        objectMap.put(0, new Container(\"chestClosed\", false, true,250, 200, 282, 232, new AABB(250, 200, 282, 232)));\r\n        objectMap.put(1, new Armor(\"shirt_white\", \"torso\", 1, true, true, 300, 100, 364, 164, new AABB(317, 132, 410, 218)));\r\n        objectMap.put(2, new Armor(\"pants_greenish\", \"legs\", 1, true, true, 428, 100, 492, 164, new AABB(445, 132, 538, 218)));\r\n        objectMap.put(3, new Armor(\"shoes_brown\", \"feet\", 1, true, true, 364, 100, 428, 164, new AABB(381, 132, 474, 218)));\r\n        objectMap.put(4, new Weapon(\"rapier\", \"slash\", 10, true, true, 200, 100, 392, 292, new AABB(281, 181, 309, 209)));\r\n\r\n        mobList.add(player = new Player(290, 192, 1, 100, 0, 10));\r\n        mobList.add(new Slime(350, 300, 1, 50, 0, 5));\r\n        mobList.add(new Slime(330, 300, 1, 50, 0, 5));\r\n        mobList.add(new Slime(310, 300, 1, 50, 0, 5));\r\n        mobList.add(new Slime(290, 300, 1, 50, 0, 5));\r\n        mobList.add(new Slime(270, 300, 1, 50, 0, 5));\r\n        mobList.add(new Slime(250, 300, 1, 50, 0, 5));\r\n        mobList.add(new Slime(230, 300, 1, 50, 0, 5));\r\n        mobList.add(new Slime(210, 300, 1, 50, 0, 5));\r\n        mobList.add(new Slime(190, 300, 1, 50, 0, 5));\r\n\r\n        // Клашива ESC на выход(закрытие приложения)\r\n        glfwSetKeyCallback(window, (window, key, scancode, action, mods) -> {\r\n            if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS) {\r\n                AudioMaster.destroy();\r\n                AL10.alDeleteBuffers(soundMap.get(\"mainMenuTheme\"));\r\n                AL10.alDeleteBuffers(soundMap.get(\"dungeonAmbient1\"));\r\n                glfwSetWindowShouldClose(window, true);\r\n                for (Mob mob : mobList) {\r\n                    if (!mob.isDead()) {\r\n                        mob.getTimer().cancel();\r\n                        mob.getTimer().purge();\r\n                    }\r\n                }\r\n            }\r\n            if (level.equals(\"MainMenu\") && key == GLFW_KEY_ENTER && action == GLFW_PRESS) {\r\n                level = \"FirstLevel\";\r\n                glTranslated(forCameraInMainMenu, 0, 0);\r\n                player.setX(150);\r\n                player.setY(150);\r\n                player.setSpeed(2);\r\n            }\r\n            if (key == GLFW_KEY_LEFT && action == GLFW_PRESS && !level.equals(\"MainMenu\")) player.setAttackLeft(true);\r\n            if (key == GLFW_KEY_RIGHT && action == GLFW_PRESS && !level.equals(\"MainMenu\")) player.setAttackRight(true);\r\n            if (key == GLFW_KEY_UP && action == GLFW_PRESS && !level.equals(\"MainMenu\")) player.setAttackUp(true);\r\n            if (key == GLFW_KEY_DOWN && action == GLFW_PRESS && !level.equals(\"MainMenu\")) player.setAttackDown(true);\r\n            if (key == GLFW_KEY_E && action == GLFW_PRESS && !level.equals(\"MainMenu\")) key_E_Pressed = true;\r\n        });\r\n    }\r\n\r\n    private void loop() {\r\n        int torch_i = 1, torch_g = 0;\r\n\r\n        while (!glfwWindowShouldClose(window)) {\r\n            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\r\n\r\n            // Переключение уровня\r\n            switch (level) {\r\n                case \"MainMenu\": {\r\n                    if (forMainTheme) {\r\n                        backgroundMusic.play(soundMap.get(\"mainMenuTheme\"));\r\n                        forMainTheme = false;\r\n                    }\r\n                    glBindTexture(GL_TEXTURE_2D, textureMap.get(\"MainMenu\")); // Фон главного меню\r\n                    createQuadTexture(0, 0, 1536, 360);\r\n                    glBindTexture(GL_TEXTURE_2D, textureMap.get(\"Press_enter\"));\r\n                    createQuadTexture(player.getX() - 18, player.getY() - 100, player.getX() + 82, player.getY() - 72);\r\n                    if (player.getX() == 1186) forMainMenu = false;\r\n                    else if (player.getX() == 290) forMainMenu = true;\r\n                    if (forMainMenu) {\r\n                        glTranslated(-1, 0, 0);\r\n                        forCameraInMainMenu++;\r\n                        player.updateForMainMenu(\"right\");\r\n                    }\r\n                    else {\r\n                        glTranslated(1, 0, 0);\r\n                        forCameraInMainMenu--;\r\n                        player.updateForMainMenu(\"left\");\r\n                    }\r\n                    break;\r\n                }\r\n                case \"FirstLevel\": {\r\n                    if (!forMainTheme) {\r\n                        backgroundMusic.stop(soundMap.get(\"mainMenuTheme\"));\r\n                        backgroundMusic.changeVolume(0.1f);\r\n                        backgroundMusic.play(soundMap.get(\"dungeonAmbient1\"));\r\n                        forMainTheme = true;\r\n                    }\r\n                    glBindTexture(GL_TEXTURE_2D, textureMap.get(\"level0\")); // Фон первого уровня\r\n                    createQuadTexture(0, 0, 640, 360);\r\n                    if (torch_i == 10) torch_i = 1;\r\n                    glBindTexture(GL_TEXTURE_2D, textureMap.get(\"torch_0\" + torch_i));\r\n                    createQuadTexture(190, 63, 221, 126);\r\n                    glBindTexture(GL_TEXTURE_2D, textureMap.get(\"torch_0\" + torch_i));\r\n                    createQuadTexture(384, 63, 415, 126);\r\n                    glBindTexture(GL_TEXTURE_2D, textureMap.get(\"torch_0\" + torch_i));\r\n                    createQuadTexture(556, 158, 587, 221);\r\n                    if (torch_g == 8) {\r\n                        torch_i++;\r\n                        torch_g = 0;\r\n                    }\r\n                    torch_g++;\r\n\r\n                    // Отрисовка всех объектов\r\n                    for (int i = 0; i < objectMap.size(); i++) {\r\n                        Object object = objectMap.get(i);\r\n                        if (!object.isLying()) continue;\r\n                        glBindTexture(GL_TEXTURE_2D, textureMap.get(object.getTexture()));\r\n                        createQuadTexture(object.getMinX(), object.getMinY(), object.getMaxX(), object.getMaxY());\r\n                    }\r\n                    if (key_E_Pressed) {\r\n                        for (int i = 0; i < objectMap.size(); i++) {\r\n                            if (objectMap.get(i) instanceof Armor) {\r\n                                Armor changingArmor = (Armor) objectMap.get(i);\r\n                                if (AABB.AABBvsAABB(player.getCollisionBox(), changingArmor.getCollisionBox())) {\r\n                                    Armor playerArmor = player.getArmorType(changingArmor);\r\n                                    changingArmor.setIsLying(false);\r\n                                    player.setArmor(changingArmor);\r\n                                    armorChange.play(soundMap.get(\"changingArmor\"));\r\n                                    changingArmor = playerArmor;\r\n                                    changingArmor.setMinX(player.getCollisionBox().getMin().x - 20);\r\n                                    changingArmor.setMinY(player.getCollisionBox().getMin().y - 30);\r\n                                    changingArmor.setMaxX(player.getCollisionBox().getMin().x + 44);\r\n                                    changingArmor.setMaxY(player.getCollisionBox().getMin().y + 34);\r\n                                    changingArmor.setIsLying(true);\r\n                                    changingArmor.getCollisionBox().update(changingArmor.getMinX() + 17, changingArmor.getMinY() + 32,\r\n                                            changingArmor.getMinX() + 46, changingArmor.getMinY() + 54);\r\n                                    objectMap.put(i, changingArmor);\r\n                                    break;\r\n                                }\r\n                            }\r\n                            else if (objectMap.get(i) instanceof Weapon) {\r\n                                Weapon changingWeapon = (Weapon) objectMap.get(i);\r\n                                if (AABB.AABBvsAABB(player.getCollisionBox(), changingWeapon.getCollisionBox())) {\r\n                                    Weapon playerWeapon = player.getWeapon();\r\n                                    changingWeapon.setIsLying(false);\r\n                                    changingWeapon.resize();\r\n                                    player.setWeapon(changingWeapon);\r\n                                    armorChange.play(soundMap.get(\"changingArmor\"));\r\n                                    changingWeapon = playerWeapon;\r\n                                    changingWeapon.setMinX(player.getCollisionBox().getMin().x - 64);\r\n                                    changingWeapon.setMinY(player.getCollisionBox().getMin().y - 64);\r\n                                    changingWeapon.setMaxX(player.getCollisionBox().getMin().x + 128);\r\n                                    changingWeapon.setMaxY(player.getCollisionBox().getMin().y + 128);\r\n                                    changingWeapon.setIsLying(true);\r\n                                    changingWeapon.getCollisionBox().update(changingWeapon.getMinX() + 81, changingWeapon.getMinY() + 81,\r\n                                            changingWeapon.getMinX() + 109, changingWeapon.getMinY() + 109);\r\n                                    objectMap.put(i, changingWeapon);\r\n                                    break;\r\n                                }\r\n                            }\r\n                            else if (objectMap.get(i) instanceof Container) {\r\n                                Container change = (Container) objectMap.get(i);\r\n                                if (AABB.AABBvsAABB(player.getCollisionBox(), change.getCollisionBox())) {\r\n                                    change.setTexture(\"chestOpened\");\r\n                                    for (int h = 0; h < change.loot.size(); h++)\r\n                                        objectMap.put(objectMap.size(), change.loot.get(h));\r\n                                    objectMap.put(i, change);\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    key_E_Pressed = false;\r\n\r\n                    // Все операции с мобами\r\n                    for (int i = 1; i < mobList.size(); i++) {\r\n                        if (!mobList.get(i).isDead()) {\r\n                            if (mobList.get(i) instanceof Slime) {\r\n                                Slime slime = (Slime) mobList.get(i);\r\n                                if (!slime.isAnimationTaskStarted()) slime.getTimer().schedule(slime.getAnimationTask(), 0, 120);\r\n                                glBindTexture(GL_TEXTURE_2D, textureMap.get(\"slime_\" + slime.getMoveDirection() + \"_0\" + slime.getAnimationTime()));\r\n                                createQuadTexture(slime.getX(), slime.getY(), slime.getX() + 18, slime.getY() + 12);\r\n                                slime.getHitbox().update(slime.getX() + 3, slime.getY() + 2, slime.getX() + 14, slime.getY() + 10);\r\n                                slime.getCollisionBox().update(slime.getX() + 1, slime.getY() + 1, slime.getX() + 16, slime.getY() + 11);\r\n\r\n                                // Преследование игрока слаймом\r\n                                if (!AABB.AABBvsAABB(player.getHitbox(), slime.getHitbox()) && (int)(Math.random() * 6) == 5) {\r\n                                    if (slime.getHitbox().getMin().x > player.getHitbox().getMin().x) slime.moveLeft();\r\n                                    else slime.moveRight();\r\n                                    if (slime.getHitbox().getMin().y > player.getHitbox().getMin().y) slime.moveUp();\r\n                                    else slime.moveDown();\r\n                                }\r\n                                // Игрок получает урона от слизня\r\n                                if (AABB.AABBvsAABB(player.getHitbox(), slime.getHitbox()) && !player.isImmortal()) {\r\n                                    if (player.getX() > slime.getX() && player.getY() > slime.getY()) player.setKnockbackDirection(\"right\");\r\n                                    else if (player.getX() < slime.getX()) player.setKnockbackDirection(\"left\");\r\n                                    else if (player.getY() > slime.getY()) player.setKnockbackDirection(\"down\");\r\n                                    else if (player.getY() < slime.getY()) player.setKnockbackDirection(\"up\");\r\n                                    player.takeDamage(slime.getDamage());\r\n                                    player.setImmortal(true);\r\n                                    player.getTimer().schedule(player.getKnockbackTask(), 0, 10);\r\n                                }\r\n                                // Слизень получает урон от игрока\r\n                                if (AABB.AABBvsAABB(player.getAttackBox(), slime.getHitbox()) && !slime.isImmortal()) {\r\n                                    if (player.isAttackLeft()) slime.setKnockbackDirection(\"left\");\r\n                                    else if (player.isAttackRight()) slime.setKnockbackDirection(\"right\");\r\n                                    else if (player.isAttackUp()) slime.setKnockbackDirection(\"up\");\r\n                                    else if (player.isAttackDown()) slime.setKnockbackDirection(\"down\");\r\n                                    slime.setHealth(slime.getHealth() - player.getDamage());\r\n                                    slime.setImmortal(true);\r\n                                    slime.getTimer().schedule(slime.getKnockbackTask(), 0, 10);\r\n                                    mobHurtSound.play(soundMap.get(\"slimeHurt\"));\r\n                                }\r\n                                if (player.getTime() >= 15) {\r\n                                    player.stopTimer();\r\n                                    player.setImmortal(false);\r\n                                }\r\n                                if (slime.getKnockbackTime() >= 25) {\r\n                                    slime.stopTimer();\r\n                                    slime.setImmortal(false);\r\n                                }\r\n\r\n                                // Отрисовка хелсбара\r\n                                if (slime.getHealth() <= 0) {\r\n                                    slime.setDead(true);\r\n                                    slime.getTimer().cancel();\r\n                                    slime.getTimer().purge();\r\n                                    mobList.remove(slime);\r\n                                }\r\n                                else {\r\n                                    int tempHealth = slime.getHealth() % 10 == 0 ? slime.getHealth() * 2 : (slime.getHealth() * 2) - ((slime.getHealth() * 2) % 10) + 10;\r\n                                    glBindTexture(GL_TEXTURE_2D, textureMap.get(\"enemyHp\" + tempHealth));\r\n                                    createQuadTexture(slime.getX(), slime.getY() - 2, slime.getX() + 16, slime.getY());\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Проверка всех мобов на столкновение со стенами, объектами и другими мобами. Объекты с объектами\r\n                    for (int i1 = 0; i1 < mobList.size(); i1++) {\r\n                        Mob mob = mobList.get(i1);\r\n                        if (AABB.AABBvsAABB(mob.getCollisionBox(), aabbMap.get(\"wall1\")))\r\n                            mob.stopRight();\r\n                        if (AABB.AABBvsAABB(mob.getCollisionBox(), aabbMap.get(\"wall4\")))\r\n                            mob.stopLeft();\r\n                        if (AABB.AABBvsAABB(mob.getCollisionBox(), aabbMap.get(\"wall0\")) || AABB.AABBvsAABB(mob.getCollisionBox(), aabbMap.get(\"wall2\")))\r\n                            mob.stopUp();\r\n                        if (AABB.AABBvsAABB(mob.getCollisionBox(), aabbMap.get(\"wall3\")))\r\n                            mob.stopDown();\r\n\r\n                        for (int i = 0; i < objectMap.size(); i++) {\r\n                            Object object = objectMap.get(i);\r\n                            if (!(object instanceof Furniture) && !(object instanceof Container)) {\r\n                                // Столкновение объектов со стенами\r\n                                if (AABB.AABBvsAABB(object.getCollisionBox(), aabbMap.get(\"wall1\")))\r\n                                    object.stopRight();\r\n                                if (AABB.AABBvsAABB(object.getCollisionBox(), aabbMap.get(\"wall4\")))\r\n                                    object.stopLeft();\r\n                                if (AABB.AABBvsAABB(object.getCollisionBox(), aabbMap.get(\"wall0\")) || AABB.AABBvsAABB(object.getCollisionBox(), aabbMap.get(\"wall2\")))\r\n                                    object.stopUp();\r\n                                if (AABB.AABBvsAABB(object.getCollisionBox(), aabbMap.get(\"wall3\")))\r\n                                    object.stopDown();\r\n\r\n                                // Столкновение объектов с объектами\r\n                                for (int j = i + 1; j < objectMap.size(); j++) {\r\n                                    Object object2 = objectMap.get(j);\r\n                                    if (!(object2 instanceof Furniture) && !(object2 instanceof Container)) {\r\n                                        if (AABB.AABBvsAABB(object.getCollisionBox(), object2.getCollisionBox())) object.moveLeft();\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            if (object.isNoclip()) continue;\r\n                            if (AABB.AABBvsAABB2(mob.getCollisionBox(), object.getCollisionBox()))\r\n                                mob.stop(CollisionMessage.getMessage());\r\n                        }\r\n\r\n                        for (int j1 = i1 + 1; j1 < mobList.size(); j1++) {\r\n                            Mob mob2 = mobList.get(j1);\r\n                            if (!(mob instanceof Player)) {\r\n                                if (AABB.AABBvsAABB2(mob.getCollisionBox(), mob2.getCollisionBox()))\r\n                                    mob.stop(CollisionMessage.getMessage());\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Проверка перехода на второй уровень\r\n                    if (AABB.AABBvsAABB(player.getCollisionBox(), aabbMap.get(\"entranceToSecondLevel\"))) {\r\n                        level = \"SecondLevel\";\r\n                        // Обновление хитбоксов стен для второго уровня\r\n                        for (int i = 0, j = 0; i < 7; i++, j+=4) {\r\n                            aabbMap.get(\"wall\" + i).update(Storage.secondLevelWalls[j], Storage.secondLevelWalls[j + 1],\r\n                                    Storage.secondLevelWalls[j + 2], Storage.secondLevelWalls[j + 3]);\r\n                        }\r\n                        player.setX(2 - 14);\r\n                        player.setY(225);\r\n                    }\r\n                    break;\r\n                }\r\n                case \"SecondLevel\": {\r\n//                    Skeleton skeleton = (Skeleton) mobList.get(2);\r\n                    glBindTexture(GL_TEXTURE_2D, textureMap.get(\"level1\")); // Фон второго уровня\r\n                    createQuadTexture(0, 0, 640, 360);\r\n\r\n                    // Все операции со скелетоном\r\n                    /*if (!skeleton.isDead()) {\r\n                        if (forSkeletonAnimation) {\r\n                            skeleton.getTimer().schedule(skeleton.getAnimationTask(), 0, 120);\r\n                            forSkeletonAnimation = false;\r\n                        }\r\n                        glBindTexture(GL_TEXTURE_2D, textureMap.get(\"skeleton_\" + skeleton.getMoveDirection() + \"_move_0\" + skeleton.getAnimationTime()));\r\n                        skeleton.getHitbox().update(skeleton.getX() + 18, skeleton.getY() + 15, skeleton.getX() + 45, skeleton.getY() + 61);\r\n                        skeleton.getCollisionBox().update(skeleton.getX() + 16, skeleton.getY() + 44, skeleton.getX() + 47, skeleton.getY() + 62);\r\n                        createQuadTexture(skeleton.getX(), skeleton.getY(), skeleton.getX() + 64, skeleton.getY() + 64);\r\n\r\n                        // Преследование игрока скелетоном\r\n                        if (!AABB.AABBvsAABB(player.getHitbox(), skeleton.getHitbox())) {\r\n                            if (player.getHitbox().getMin().y < skeleton.getHitbox().getMin().y &&\r\n                                    player.getHitbox().getMin().x < skeleton.getHitbox().getMin().x) skeleton.moveUpLeft();\r\n                            else if (player.getHitbox().getMin().y < skeleton.getHitbox().getMin().y &&\r\n                                    player.getHitbox().getMin().x > skeleton.getHitbox().getMin().x) skeleton.moveUpRight();\r\n                            else if (player.getHitbox().getMin().y > skeleton.getHitbox().getMin().y &&\r\n                                    player.getHitbox().getMin().x < skeleton.getHitbox().getMin().x) skeleton.moveDownLeft();\r\n                            else if (player.getHitbox().getMin().y > skeleton.getHitbox().getMin().y &&\r\n                                    player.getHitbox().getMin().x > skeleton.getHitbox().getMin().x) skeleton.moveDownRight();\r\n                            else if (player.getHitbox().getMin().x < skeleton.getHitbox().getMin().x) skeleton.moveLeft();\r\n                            else if (player.getHitbox().getMin().x > skeleton.getHitbox().getMin().x) skeleton.moveRight();\r\n                            else if (player.getHitbox().getMin().y < skeleton.getHitbox().getMin().y) skeleton.moveUp();\r\n                            else if (player.getHitbox().getMin().y > skeleton.getHitbox().getMin().y) skeleton.moveDown();\r\n                        }\r\n\r\n                        // Получение урона от скелетона\r\n                        if (AABB.AABBvsAABB(player.getHitbox(), skeleton.getHitbox()) && !player.isDead() && !player.isImmortal()) {\r\n                            if (player.getX() > skeleton.getX()) player.setKnockbackDirection(\"Right\");\r\n                            else if (player.getX() < skeleton.getX()) player.setKnockbackDirection(\"Left\");\r\n                            else if (player.getY() > skeleton.getY()) player.setKnockbackDirection(\"Down\");\r\n                            else if (player.getY() < skeleton.getY()) player.setKnockbackDirection(\"Up\");\r\n                            player.takeDamage(skeleton.getDamage());\r\n                            player.setImmortal(true);\r\n                            player.getTimer().schedule(player.getTimerTaskPlayer(), 0, 10);\r\n                        }\r\n                        // Скелетон получает урон от игрока\r\n                        if (AABB.AABBvsAABB(player.getAttackBox(), skeleton.getHitbox()) && !skeleton.isImmortal()) {\r\n                            if (player.getX() > skeleton.getX()) skeleton.setDirection(\"Left\");\r\n                            else if (player.getX() < skeleton.getX()) skeleton.setDirection(\"Right\");\r\n                            else if (player.getY() > skeleton.getY()) skeleton.setDirection(\"Up\");\r\n                            else if (player.getY() < skeleton.getY()) skeleton.setDirection(\"Down\");\r\n                            skeleton.setHealth(skeleton.getHealth() - player.getDamage());\r\n                            skeleton.setImmortal(true);\r\n                            skeleton.getTimer().schedule(skeleton.getKnockbackTimerTask(), 0, 10);\r\n                        }\r\n                        player.getAttackBox().update(0, 0, 0, 0);\r\n                        if (player.getTime() >= 15) {\r\n                            player.stopTimerPlayer();\r\n                            player.setImmortal(false);\r\n                        }\r\n                        if (skeleton.getKnockbackTime() >= 25) {\r\n                            skeleton.stopKnockbackTimer();\r\n                            skeleton.setImmortal(false);\r\n                            forSkeletonAnimation = true;\r\n                        }\r\n\r\n                        if (skeleton.getHealth() <= 0) skeleton.setDead(true);\r\n                    }\r\n                    else skeleton.getHitbox().update(0,0,0,0);*/\r\n\r\n                    // Проверка всех мобов на столкновение со стенами\r\n                    for (Mob mob : mobList) {\r\n                        if (AABB.AABBvsAABB(mob.getCollisionBox(), aabbMap.get(\"wall3\")))\r\n                            mob.stopRight();\r\n                        if (AABB.AABBvsAABB(mob.getCollisionBox(), aabbMap.get(\"wall1\")) || AABB.AABBvsAABB(mob.getCollisionBox(), aabbMap.get(\"wall5\")))\r\n                            mob.stopLeft();\r\n                        if (AABB.AABBvsAABB(mob.getCollisionBox(), aabbMap.get(\"wall0\")) || AABB.AABBvsAABB(mob.getCollisionBox(), aabbMap.get(\"wall2\")))\r\n                            mob.stopUp();\r\n                        if (AABB.AABBvsAABB(mob.getCollisionBox(), aabbMap.get(\"wall6\")) || AABB.AABBvsAABB(mob.getCollisionBox(), aabbMap.get(\"wall4\")))\r\n                            mob.stopDown();\r\n                    }\r\n\r\n                    // Проверка перехода на первый уровень\r\n                    if (AABB.AABBvsAABB(player.getCollisionBox(), aabbMap.get(\"entranceToFirstLevel\"))) {\r\n                        level = \"FirstLevel\";\r\n                        // Обновление хитбоксов стен для первого уровня\r\n                        for(int i = 0, j = 0; i < 5; i++, j+=4) {\r\n                            aabbMap.get(\"wall\" + i).update(Storage.firstLevelWalls[j], Storage.firstLevelWalls[j + 1],\r\n                                    Storage.firstLevelWalls[j + 2], Storage.firstLevelWalls[j + 3]);\r\n                        }\r\n                        player.setX(638 - 64 + 15);\r\n                        player.setY(281);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Метод для обработки игрока и отрисовка интерфейса\r\n            if (!level.equals(\"MainMenu\")) {\r\n                player.update(window);\r\n\r\n                // Полоска здоровья\r\n                int tempHealth = player.getHealth() % 10 == 0 ? player.getHealth() : player.getHealth() - (player.getHealth() % 10) + 10;\r\n                if (tempHealth >= 0) glBindTexture(GL_TEXTURE_2D, textureMap.get(tempHealth + \"hp\"));\r\n                if (player.getHealth() <= 0) {\r\n                    glBindTexture(GL_TEXTURE_2D, textureMap.get(\"0hp\"));\r\n                    player.setDead(true);\r\n                }\r\n                createQuadTexture(0, 0, 103, 18);\r\n\r\n                // Щит с броней\r\n                if (player.getArmor() < 30) glBindTexture(GL_TEXTURE_2D, textureMap.get(\"armor\" + player.getArmor() / 5));\r\n                else glBindTexture(GL_TEXTURE_2D, textureMap.get(\"armor5\"));\r\n                createQuadTexture(0, 19, 34, 53);\r\n\r\n                glBindTexture(GL_TEXTURE_2D, textureMap.get(\"number_0\"));\r\n                createQuadTexture(632, 348, 640, 360);\r\n            }\r\n\r\n            // Отрисовка экипировки и анимации\r\n            glBindTexture(GL_TEXTURE_2D, textureMap.get(player.getBodyAnimation()));\r\n            createQuadTexture(player.getX(), player.getY(), player.getX() + 64, player.getY() + 64);\r\n            if (!player.getFeetTexture().equals(\"nothing\")) {\r\n                glBindTexture(GL_TEXTURE_2D, textureMap.get(player.getFeetAnimation()));\r\n                createQuadTexture(player.getX(), player.getY(), player.getX() + 64, player.getY() + 64);\r\n            }\r\n            if (!player.getLegsTexture().equals(\"nothing\")) {\r\n                glBindTexture(GL_TEXTURE_2D, textureMap.get(player.getLegsAnimation()));\r\n                createQuadTexture(player.getX(), player.getY(), player.getX() + 64, player.getY() + 64);\r\n            }\r\n            if (!player.getTorsoTexture().equals(\"nothing\")) {\r\n                glBindTexture(GL_TEXTURE_2D, textureMap.get(player.getTorsoAnimation()));\r\n                createQuadTexture(player.getX(), player.getY(), player.getX() + 64, player.getY() + 64);\r\n            }\r\n            if (!player.getShouldersTexture().equals(\"nothing\")) {\r\n                glBindTexture(GL_TEXTURE_2D, textureMap.get(player.getShouldersAnimation()));\r\n                createQuadTexture(player.getX(), player.getY(), player.getX() + 64, player.getY() + 64);\r\n            }\r\n            if (!player.getBeltTexture().equals(\"nothing\")) {\r\n                glBindTexture(GL_TEXTURE_2D, textureMap.get(player.getBeltAnimation()));\r\n                createQuadTexture(player.getX(), player.getY(), player.getX() + 64, player.getY() + 64);\r\n            }\r\n            if (!player.getHeadTexture().equals(\"nothing\")) {\r\n                glBindTexture(GL_TEXTURE_2D, textureMap.get(player.getHeadAnimation()));\r\n                createQuadTexture(player.getX(), player.getY(), player.getX() + 64, player.getY() + 64);\r\n            }\r\n            if (!player.getHandsTexture().equals(\"nothing\")) {\r\n                glBindTexture(GL_TEXTURE_2D, textureMap.get(player.getHandsAnimation()));\r\n                createQuadTexture(player.getX(), player.getY(), player.getX() + 64, player.getY() + 64);\r\n            }\r\n            if ((player.isAttackLeft() || player.isAttackRight() || player.isAttackUp() ||\r\n                    player.isAttackDown()) && !player.isDead() && !level.equals(\"MainMenu\")) {\r\n                glBindTexture(GL_TEXTURE_2D, textureMap.get(player.getWeaponAnimation()));\r\n                createQuadTexture(player.getX() - player.getWeapon().getMinX(), player.getY() - player.getWeapon().getMinY(),\r\n                        player.getX() + player.getWeapon().getMaxX(), player.getY() + player.getWeapon().getMaxY());\r\n            }\r\n\r\n            glfwPollEvents();\r\n            glfwSwapBuffers(window);\r\n        }\r\n    }\r\n\r\n    private void createQuadTexture(int xMin, int yMin, int xMax, int yMax) {\r\n        glBegin(GL_QUADS);\r\n        glTexCoord2d(0, 0);\r\n        glVertex2f(xMin, yMin);\r\n        glTexCoord2d(1, 0);\r\n        glVertex2f(xMax, yMin);\r\n        glTexCoord2d(1, 1);\r\n        glVertex2f(xMax, yMax);\r\n        glTexCoord2d(0, 1);\r\n        glVertex2f(xMin, yMax);\r\n        glEnd();\r\n    }\r\n\r\n    void reshape(int w, int h) {\r\n        glViewport(0, 0, w, h);\r\n        glMatrixMode(GL_PROJECTION);\r\n        glLoadIdentity();\r\n        glOrtho(0, w, h, 0, 1, -1);\r\n        glMatrixMode(GL_MODELVIEW);\r\n        if (forScale) {\r\n            glScaled(3, 3, 1);\r\n            forScale = false;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Window.java	(revision b1ac5edb1ac0e0ece7efd93acdc13edfe0e572ad)
+++ src/Window.java	(date 1597496173683)
@@ -508,8 +508,8 @@
                 else glBindTexture(GL_TEXTURE_2D, textureMap.get("armor5"));
                 createQuadTexture(0, 19, 34, 53);
 
-                glBindTexture(GL_TEXTURE_2D, textureMap.get("number_0"));
-                createQuadTexture(632, 348, 640, 360);
+                glBindTexture(GL_TEXTURE_2D, textureMap.get("number_1"));
+                createQuadTexture(0, 60, 8, 72);
             }
 
             // Отрисовка экипировки и анимации
